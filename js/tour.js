// Generated by CoffeeScript 1.4.0
(function() {

  window.Tour = (function() {

    function Tour(steps, introStep) {
      var step, _i, _len;
      this.steps = [];
      this.stepsById = {};
      this.stepsByGroup = {};
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        step = steps[_i];
        if (step instanceof TourGroup) {
          this.addTourGroup(step);
        } else {
          this.addStep(step);
        }
      }
      this.introStep = introStep;
      Tour.setCurrent(this);
    }

    Tour.current = function() {
      return this.currentTour;
    };

    Tour.setCurrent = function(tour) {
      return this.currentTour = tour;
    };

    Tour.prototype.start = function() {
      Tour.setCurrent(this);
      if (this.savedState()) {
        return this.show(this.savedState());
      } else {
        return this.startOver();
      }
    };

    Tour.prototype.showIntro = function() {
      if (!this.introStep) {
        return;
      }
      this.close();
      return this.intro = this.renderModal("tour-start", '<div id="tour-start" class="modal hide"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove"></i></button><h3 class="title">' + this.introStep.title + '</h3></div><div class="modal-body" style="max-height:550px;">' + this.introStep.content + this.buildDropdown() + '<a href="#" class="btn btn-primary pull-right" data-tour="start">Start</a></div></div>', {
        modalWidth: 400
      });
    };

    Tour.prototype.startOver = function() {
      return this.show(this.steps[0]);
    };

    Tour.prototype.end = function() {
      this.close();
      return this.clearState();
    };

    Tour.prototype.gotoPage = function(step) {
      var pageRegex, pageUrl, _ref;
      if (!step.page) {
        return false;
      }
      _ref = step.page(), pageRegex = _ref[0], pageUrl = _ref[1];
      if (window.location.pathname.match(pageRegex)) {
        return false;
      }
      window.location.href = pageUrl;
      return true;
    };

    Tour.prototype.nextStep = function() {
      var _base, _name, _ref;
      return (_ref = (_base = this.steps)[_name = this.currentStep + 1]) != null ? _ref : _base[_name] = null;
    };

    Tour.prototype.prevStep = function() {
      var _base, _name, _ref;
      return (_ref = (_base = this.steps)[_name = this.currentStep - 1]) != null ? _ref : _base[_name] = null;
    };

    Tour.prototype.next = function() {
      return this.show(this.nextStep());
    };

    Tour.prototype.prev = function() {
      return this.show(this.prevStep());
    };

    Tour.prototype.cancel = function() {
      return this.close();
    };

    Tour.prototype.close = function() {
      $('body').trigger('expose:hide');
      if (this.modal) {
        this.modal.modal('hide');
      }
      if (this.popover) {
        this.popover.hide();
      }
      if (this.intro) {
        return this.intro.modal('hide');
      }
    };

    Tour.prototype.addStep = function(step, group) {
      var _base;
      step.index = this.steps.length;
      this.steps.push(step);
      this.stepsById[step.id] = step;
      group || (group = null);
      (_base = this.stepsByGroup)[group] || (_base[group] = []);
      return this.stepsByGroup[group].push(step);
    };

    Tour.prototype.addTourGroup = function(tourGroup) {
      var step, _i, _len, _ref, _results;
      _ref = tourGroup.steps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        _results.push(this.addStep(step, tourGroup.name));
      }
      return _results;
    };

    Tour.prototype.findStep = function(id) {
      if (typeof id === "object") {
        return id;
      }
      return this.stepsById[id];
    };

    Tour.prototype.show = function(id) {
      var step;
      Tour.setCurrent(this);
      step = this.findStep(id);
      if (this.gotoPage(step)) {
        return;
      }
      this.saveState(step);
      if (step.beforeShow && step.beforeShow()) {
        return;
      }
      this.close();
      this.build(step);
      return this.expose(step);
    };

    Tour.prototype.saveState = function(step) {
      if (localStorage) {
        localStorage['tourStep'] = step.id;
      }
      return this.currentStep = step.index;
    };

    Tour.prototype.savedState = function() {
      if (localStorage) {
        return localStorage['tourStep'];
      }
    };

    Tour.prototype.clearState = function() {
      if (localStorage) {
        localStorage.removeItem('tourStep');
      }
      return this.currentStep = null;
    };

    Tour.prototype.build = function(step) {
      if (step.type === "modal") {
        this.buildModal(step);
        this.modal.modal('show');
      } else {
        this.buildPopover(step);
        this.popover.show();
      }
      return this.buttons(step);
    };

    Tour.prototype.buildModal = function(step) {
      if (this.modal) {
        this.modal.find('.modal-body p').html(step.content);
        this.modal.find('.modal-header h3').html(step.title);
      } else {
        this.modal = this.renderModal('tour-modal', '<div id="tour-modal" class="modal hide"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove"></i></button><h3 class="title">' + definition.title + '</h3></div><div class="modal-body" style="max-height:550px;"><p>' + definition.content + '</p>' + this.buildActions() + '</div></div>', {
          modalWidth: 400
        });
      }
      return this.modal;
    };

    Tour.prototype.buildPopover = function(step) {
      var content, link, title;
      link = $(step.anchor);
      title = '<a class="close" data-tour="cancel"><i class="icon-remove"></i></a>' + step.title;
      content = step.content + '<br/><br/>' + this.buildActions();
      if (this.popover) {
        this.popover.options.content = content;
        this.popover.options.title = title;
        this.popover.options.placement = step.placement;
        this.popover.$element = link;
      } else {
        this.popover = link.popover({
          animation: false,
          placement: step.placement,
          trigger: 'manual',
          content: content,
          title: title,
          html: true
        }).data('popover');
        this.popover.tip().width(400).addClass('tour-popover');
        this.popover.show();
      }
      return this.popover;
    };

    Tour.prototype.buildDropdown = function() {
      var name, options, step, steps, _ref;
      if (!this.dropdown) {
        options = "";
        _ref = this.stepsByGroup;
        for (name in _ref) {
          steps = _ref[name];
          if (name !== "null") {
            options += '<optgroup label="' + name + '">';
          }
          options += ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = steps.length; _i < _len; _i++) {
              step = steps[_i];
              _results.push('<option data-step="' + step.id + '">' + step.title + '</option>');
            }
            return _results;
          })()).join("");
          if (name !== "null") {
            options += '</optgroup>';
          }
        }
        this.dropdown = '<select class="tour-goto"><option>Jump to...</option>' + options + '</select>';
      }
      return this.dropdown;
    };

    Tour.prototype.buildActions = function() {
      if (!this.actions) {
        this.actions = this.buildDropdown() + '<div class="tour-buttons pull-right"><a class="btn btn" data-tour="prev" href="#">Prev</a> <a class="btn btn-primary" data-tour="next" href="#">Next</a><a class="btn btn-primary" data-tour="end" href="#">Close</a><span class="button-annotation message-ue"></span></div>';
      }
      return this.actions;
    };

    Tour.prototype.expose = function(step) {
      if (step.expose) {
        return $(step.expose).expose({
          padding: step.exposePadding,
          "static": true
        });
      }
    };

    Tour.prototype.buttons = function(step) {
      if (this.prevStep()) {
        $('*[data-tour=prev').show();
      } else {
        $('*[data-tour=prev').hide();
      }
      if (this.nextStep()) {
        $('*[data-tour=next]').show();
        return $('*[data-tour=end]').hide();
      } else {
        $('*[data-tour=next]').hide();
        return $('*[data-tour=end]').show();
      }
    };

    Tour.prototype.renderModal = function(id, html, options) {
      var modal, modalWidth;
      $(".modal").each(function(i, el) {
        if ($(el).data('modal')) {
          return $(el).modal('hide');
        }
      });
      options || (options = {});
      modalWidth = options.modalWidth || 760;
      $("#" + id).remove();
      $("body").append(html);
      modal = $("#" + id);
      if (modalWidth === "auto") {
        modal.css({
          width: "auto"
        }).css({
          marginLeft: modal.width() / -2 + "px"
        });
      } else {
        modal.css({
          width: modalWidth + 'px',
          marginLeft: (modalWidth / -2) + "px"
        });
      }
      if (options.modalHeight) {
        modal.css({
          height: options.modalHeight + 'px'
        });
      }
      if (options.addCloseButton) {
        modal.find('.modal-body').prepend('<button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove"></i></button>');
      }
      modal.modal(options).css({
        marginTop: modal.outerHeight() / -2 + 'px'
      }).modal('show');
      return modal;
    };

    return Tour;

  })();

  window.TourGroup = (function() {

    function TourGroup(name, steps) {
      this.name = name;
      this.steps = steps;
    }

    return TourGroup;

  })();

  window.TourStep = (function() {

    function TourStep(id, title, content, options) {
      this.id = id;
      this.title = title;
      this.content = content;
      this.options = options;
      this.options || (this.options = {});
      this.type = this.options.type || 'popover';
      this.expose = this.options.expose;
      this.exposePadding = this.options.exposePadding;
      this.anchor = this.options.anchor;
      this.placement = this.options.placement;
      this.page = this.options.page;
      this.beforeShow = this.options.beforeShow;
    }

    return TourStep;

  })();

  $(function() {
    return $("body").on("click", "*[data-tour]", function(evt) {
      var currentTour;
      currentTour = Tour.current();
      if (currentTour) {
        currentTour[$(this).attr('data-tour')].call(currentTour);
      }
      evt.preventDefault();
      return false;
    }).keyup(function(evt) {
      var currentTour;
      currentTour = Tour.current();
      if (evt.keyCode === 27 && currentTour) {
        return currentTour.close();
      }
    }).on("change", "select.tour-goto", function(evt) {
      var currentTour, selected, step;
      currentTour = Tour.current();
      selected = $(evt.target).find("option:selected");
      step = selected.attr("data-step");
      if (currentTour) {
        currentTour.show(step);
      }
      evt.preventDefault();
      return false;
    });
  });

}).call(this);
